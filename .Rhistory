order = res$taxon$order_name,
res_list = I(list(res)),
stringsAsFactors = FALSE
))
} else {
return(data.frame(
genero = genero,
especie = especie,
code = NA,
family = NA,
order = NA,
res_list = I(list(NULL)),
stringsAsFactors = FALSE
))
}
}
# Aplicar la función a cada fila del dataframe
df_res <- species_df %>%
rowwise() %>%
do(get_species_data(.$genero, .$especie)) %>%
ungroup()
saveRDS(df_res, file = "res_data.rds")
df_res
install.packages("stringr")
install.packages("stringr")
library(stringr)
df_res %>% mutate(family = str_to_title(family) )
df_res %>% mutate(family = str_to_title(family),
order = str_to_title(order) )
df_res <- df_res %>% mutate(family = str_to_title(family),
order = str_to_title(order) )
df_res
df
df_res
df
# Cargar los archivos y agregar la columna con el nombre del archivo
df <- map_dfr(files, ~ read_csv(.x, col_types = cols()) %>% mutate(filename = basename(.x))) %>%
select(propietario = filename, sp = Especies) %>%
separate(sp, into = c("nombre_comun", "nombre_cientifico"), sep = " \\(", extra = "merge") %>%
mutate(propietario = gsub("\\.csv$", "", propietario),
nombre_cientifico = gsub("\\)$", "", nombre_cientifico)) %>%
separate(nombre_cientifico, into = c("genero", "especie"), sep = " ", extra = "merge", fill = "left")
files <- list.files("./planillasc_csv/", pattern = "\\.csv$", full.names = TRUE)
# Cargar los archivos y agregar la columna con el nombre del archivo
df <- map_dfr(files, ~ read_csv(.x, col_types = cols()) %>% mutate(filename = basename(.x))) %>%
select(propietario = filename, sp = Especies) %>%
separate(sp, into = c("nombre_comun", "nombre_cientifico"), sep = " \\(", extra = "merge") %>%
mutate(propietario = gsub("\\.csv$", "", propietario),
nombre_cientifico = gsub("\\)$", "", nombre_cientifico)) %>%
separate(nombre_cientifico, into = c("genero", "especie"), sep = " ", extra = "merge", fill = "left")
df
# Cargar los archivos y agregar la columna con el nombre del archivo
df <- map_dfr(files, ~ read_csv(.x, col_types = cols()) %>% mutate(filename = basename(.x))) %>%
select(propietario = filename, sp = Especies) %>%
separate(sp, into = c("nombre_comun", "nombre_cientifico"), sep = " \\(", extra = "merge") %>%
mutate(propietario = gsub("\\.csv$", "", propietario),
nombre_cientifico = gsub("\\)$", "", nombre_cientifico)) %>%
separate(nombre_cientifico, into = c("genero", "especie"), sep = " ", extra = "merge", remove = FALSE)
df
rm(files)
df
df_res %>% mutate(family = str_to_title(family),
order = str_to_title(order),
nombre_cientifico = paste0(genero, " ", especie))
df_res <- df_res %>% mutate(family = str_to_title(family),
order = str_to_title(order),
nombre_cientifico = paste0(genero, " ", especie))
df_res
df_res <- readRDS("res_data.rds")
df_res <- df_res %>% mutate(family = str_to_title(family),
order = str_to_title(order),
nombre_cientifico = paste0(genero, " ", especie)) %>%
select(nombre_cientifico, orden = order, familia = family, genero, especie, codigo = code, res_list)
df_res
df_res <- readRDS("res_data.rds")
df_res <- df_res %>% mutate(family = str_to_title(family),
order = str_to_title(order),
nombre_cientifico = paste0(genero, " ", especie)) %>%
select(orden = order, familia = family, genero, especie, nombre_cientifico, codigo = code, res_list)
df_res
df %>% left_join(df_res)
df %>% left_join(df_res) %>%
select(propietario, nombre_comun, nombre_cientifico, orden, familia, codigo)
df_csv <- df %>% left_join(df_res) %>%
select(propietario, nombre_comun, nombre_cientifico, orden, familia, codigo)
write_csv(df_csv, file = "results.csv")
View(df_res)
View(df_res[[7]][[1]])
install.packages("iNEXT.4steps")
library(dplyr)
library(tidyr)
library(iNEXT.4steps)
# Leer el archivo
datos <- read.csv("listas_mack.csv", stringsAsFactors = FALSE)
datos
# Convertir a long format: una fila por especie por lista
datos_long <- datos %>%
pivot_longer(cols = starts_with("sp"), names_to = "sp_col", values_to = "especie") %>%
filter(!is.na(especie))
datos_long
# Extraer el nombre del predio desde 'codigo_lista'
datos_long <- datos_long %>%
mutate(predio = gsub("\\d+$", "", codigo_lista))
datos_long
# Lista de matrices de presencia/ausencia (una por predio)
matrices_por_predio <- datos_long %>%
group_by(predio, codigo_lista, especie) %>%
summarise(presente = 1, .groups = "drop") %>%
pivot_wider(names_from = codigo_lista, values_from = presente, values_fill = 0) %>%
group_split(predio)
# Asignar nombres de predio
nombres_predios <- unique(datos_long$predio)
names(matrices_por_predio) <- nombres_predios
# Convertir a matrices
datos_inext <- lapply(matrices_por_predio, function(df) {
as.matrix(df[,-1])  # remover columna especie
})
datos_inext
# Ejecutar iNEXT
resultado <- iNEXT(datos_inext, q = 0, datatype = "incidence_raw", nboot = 100)
iNEXT.4steps
# Ejecutar iNEXT
resultado <- iNEXT4steps(datos_inext, q = 0, datatype = "incidence_raw", nboot = 100)
# Ver estimadores de riqueza y completitud
resultado$AsyEst
# Ejecutar iNEXT
resultado <- iNEXT4steps(datos_inext, q = 0, datatype = "incidence_raw", nboot = 100)
# Ejecutar iNEXT
resultado <- iNEXT4steps(datos_inext, q = 0, datatype = "detected", nboot = 100)
# Ejecutar iNEXT
resultado <- iNEXT4steps(datos_inext, q = 0, datatype = "incidence_raw", nboot = 100)
library(dplyr)
library(tidyr)
library(iNEXT.4steps)
# Leer el archivo
datos <- read.csv("listas_mack.csv", stringsAsFactors = FALSE)
# Convertir a long format: una fila por especie por lista
datos_long <- datos %>%
pivot_longer(cols = starts_with("sp"), names_to = "sp_col", values_to = "especie") %>%
filter(!is.na(especie))
# Extraer el nombre del predio desde 'codigo_lista'
datos_long <- datos_long %>%
mutate(predio = gsub("\\d+$", "", codigo_lista))
# Lista de matrices de presencia/ausencia (una por predio)
matrices_por_predio <- datos_long %>%
group_by(predio, codigo_lista, especie) %>%
summarise(presente = 1, .groups = "drop") %>%
pivot_wider(names_from = codigo_lista, values_from = presente, values_fill = 0) %>%
group_split(predio)
# Asignar nombres de predio
nombres_predios <- unique(datos_long$predio)
names(matrices_por_predio) <- nombres_predios
# Convertir a matrices
datos_inext <- lapply(matrices_por_predio, function(df) {
as.matrix(df[,-1])  # remover columna especie
})
# Ejecutar iNEXT4steps para estimación de riqueza y completitud
resultado <- iNEXT4steps(datos_inext, q = 0, datatype = "incidence_raw", nboot = 100)
iNEXT4steps
df <- as.matrix(df[,-1])  # remover columna especie
datos_inext
# Ejecutar iNEXT4steps
resultado <- iNEXT4steps(datos_inext, q = 0, datatype = "incidence_raw", nboot = 100)
df <- as.matrix(df1])  # remover columna especie
df <- as.matrix(df[,-1])  # remover columna especie
# Convertir las matrices de presencia/ausencia en valores 0 (ausente) y 1 (presente)
datos_inext <- lapply(matrices_por_predio, function(df) {
df <- as.matrix(df[,-1])  # remover columna especie
# Asegurarnos de que todos los valores sean 0 o 1
df[!is.na(df)] <- 1  # Asignar 1 a las especies presentes (no NA)
df[is.na(df)] <- 0   # Asignar 0 a las especies ausentes (NA)
return(df)
})
# Ejecutar iNEXT4steps
resultado <- iNEXT4steps(datos_inext, q = 0, datatype = "incidence_raw", nboot = 100)
resultado
# Ejecutar iNEXT4steps
resultado <- iNEXT4steps(datos_inext, q = 0, datatype = "incidence_raw", nboot = 100)
df <- as.matrix(df[,-1])  # eliminar columna 'especie'
head(datos_inext[[1]])
matrices_por_predio <- datos_long %>%
group_by(predio, codigo_lista, especie) %>%
summarise(presente = 1, .groups = "drop") %>%
pivot_wider(names_from = codigo_lista, values_from = presente, values_fill = 0) %>%
group_split(predio)
# Asignar nombres de predio
nombres_predios <- unique(datos_long$predio)
names(matrices_por_predio) <- nombres_predios
df <- as.matrix(df[,-1])  # eliminar columna 'especie'
head(datos_inext[[1]])
especies_unicas <- unique(as.vector(as.matrix(datos[, -1])))
especies_unicas
matrices_por_predio <- lapply(unique(datos$codigo_lista), function(codigo) {
# Filtrar las filas correspondientes a cada predio
lista_predio <- datos[datos$codigo_lista == codigo,]
# Crear una matriz de presencia/ausencia (0 = ausente, 1 = presente)
matriz <- sapply(especies_unicas, function(especie) {
as.integer(especie %in% lista_predio[, -1])  # Comprobar si la especie está presente en la lista
})
# Asignar el código de lista a cada matriz
rownames(matriz) <- lista_predio$codigo_lista
return(matriz)
})
datos <- read.csv("listas_mack.csv", stringsAsFactors = FALSE)
especies_unicas <- unique(as.vector(as.matrix(datos[, -1])))
matrices_por_predio <- lapply(unique(datos$codigo_lista), function(codigo) {
# Filtrar las filas correspondientes a cada predio
lista_predio <- datos[datos$codigo_lista == codigo,]
# Crear una matriz de presencia/ausencia (0 = ausente, 1 = presente)
matriz <- sapply(especies_unicas, function(especie) {
as.integer(especie %in% lista_predio[, -1])  # Comprobar si la especie está presente en la lista
})
# Asignar el código de lista a cada matriz
rownames(matriz) <- lista_predio$codigo_lista
return(matriz)
})
head(matrices_por_predio[[1]])
resultado <- iNEXT4steps(matrices_por_predio, q = 0, datatype = "incidence_raw", nboot = 100)
resultado <- iNEXT4steps(matrices_por_predio$servettosur, q = 0, datatype = "incidence_raw", nboot = 100)
matrices_por_predio$servettosur
# Leer el archivo
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE)
especies_unicas <- unique(unlist(datos_originales[, -1]))
especies_unicas
especies_unicas <- especies_unicas[!is.na(especies_unicas)]
especies_unicas
# Crear la matriz binaria
matriz_binaria <- matrix(0, nrow = nrow(datos_originales), ncol = length(especies_unicas))
matriz_binaria
rownames(matriz_binaria) <- datos_originales$codigo_lista
colnames(matriz_binaria) <- especies_unicas
# Llenar la matriz binaria
for (i in 1:nrow(datos_originales)) {
for (j in 2:ncol(datos_originales)) {
especie <- datos_originales[i, j]
if (!is.na(especie)) {
matriz_binaria[i, especie == especies_unicas] <- 1
}
}
}
matriz_binaria
# Convertir la matriz binaria en un data frame
datos_inext <- as.data.frame(matriz_binaria)
# Realizar el análisis con iNEXT.4steps
resultado_inext <- iNEXT4steps(datos_inext, datatype = "incidence_raw")
# Calcular la completitud del inventario
completitud <- Completeness(resultado_inext, datatype = "incidence_raw")
resultado_inext
read.csv("listas_mack.csv", stringsAsFactors = FALSE)
# Leer el archivo
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE) %>%
filter(codigo_lista == starts_with("servettosur"))
read.csv("listas_mack.csv", stringsAsFactors = FALSE)
# Leer el archivo
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE) %>%
filter(substr(codigo_lista, 0, 12) == "servettosur"))
# Leer el archivo
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE) %>%
filter(substr(codigo_lista, 1, 12) == "servettosur")
datos_originales
# Leer el archivo
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE) %>%
filter(substr(codigo_lista, 0, 12) == "servettosur")
datos_originales
read.csv("listas_mack.csv", stringsAsFactors = FALSE)
# Leer el archivo
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE) %>%
filter("codigo lista" %in% c("servettosur1", "servettosur2", "servettosur3", "servettosur4", "servettosur5", "servettosur6", "servettosur7"))
datos_originales
read.csv("listas_mack.csv", stringsAsFactors = FALSE)
# Leer el archivo
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE) %>%
filter("codigo_lista" %in% c("servettosur1", "servettosur2", "servettosur3", "servettosur4", "servettosur5", "servettosur6", "servettosur7"))
datos_originales
read.csv("listas_mack.csv", stringsAsFactors = FALSE)
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE)
View(datos_originales)
# Leer el archivo
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE) %>%
filter(codigo_lista %in% c("servettosur1", "servettosur2", "servettosur3", "servettosur4", "servettosur5", "servettosur6", "servettosur7"))
datos_originales
especies_unicas <- unique(unlist(datos_originales[, -1]))
especies_unicas <- especies_unicas[!is.na(especies_unicas)]
# Crear la matriz binaria
matriz_binaria <- matrix(0, nrow = nrow(datos_originales), ncol = length(especies_unicas))
rownames(matriz_binaria) <- datos_originales$codigo_lista
colnames(matriz_binaria) <- especies_unicas
# Llenar la matriz binaria
for (i in 1:nrow(datos_originales)) {
for (j in 2:ncol(datos_originales)) {
especie <- datos_originales[i, j]
if (!is.na(especie)) {
matriz_binaria[i, especie == especies_unicas] <- 1
}
}
}
# Convertir la matriz binaria en un data frame
datos_inext <- as.data.frame(matriz_binaria)
datos_inext
# Realizar el análisis con iNEXT.4steps
resultado_inext <- iNEXT4steps(datos_inext, datatype = "incidence_raw")
resultado_inext
# Calcular la completitud del inventario
completitud <- Completeness(resultado_inext, datatype = "incidence_raw")
print(completitud)
# Calcular la completitud del inventario
completitud <- Completeness(resultado_inext, datatype = "incidence_raw")
resultado_inext
Completeness(resultado_inext)
# Visualizar la completitud del inventario
ggiNEXT4steps(resultado_inext, type = "coverage")
# Visualizar la completitud del inventario
ggiNEXT4steps(resultado_inext, type = "coverage")
datos_inext
datos_originales
especies_unicas
especies_unicas <- especies_unicas[!is.na(especies_unicas)]
especies_unicas
especies_unicas <- unique(unlist(datos_originales[, -1]))
especies_unicas <- unique(unlist(datos_originales[, -1]))
especies_unicas
especies_unicas <- especies_unicas[!is.na(especies_unicas)]
especies_unicas
matriz_binaria
# Convertir la matriz binaria en un data frame
datos_inext <- as.data.frame(matriz_binaria)
datos_inext
# Realizar el análisis con iNEXT.4steps
resultado_inext <- iNEXT4steps(datos_inext, datatype = "incidence_raw")
list_incidence_matrices <- list()
for (i in 1:nrow(datos_originales)) {
list_incidence_matrices[[i]] <- matrix(0, nrow = 1, ncol = 10) # Initialize a matrix for each list
colnames(list_incidence_matrices[[i]]) <- paste0("unit", 1:10)
rownames(list_incidence_matrices[[i]]) <- "dummy_species" # Necessary, but species names don't matter for incidence_raw
for (j in 2:ncol(datos_originales)) {
if (!is.na(datos_originales[i, j])) {
list_incidence_matrices[[i]][1, j-1] <- 1
}
}
}
names(list_incidence_matrices) <- datos_originales$codigo_lista # Name each list element
# Realizar el análisis con iNEXT.4steps
resultado_inext <- iNEXT4steps(data = list_incidence_matrices, datatype = "incidence_raw")
resultado_inext
list_incidence_matrices
list_incidence_matrices
View(list_incidence_matrices)
list_incidence_matrices$servettosur1
list_incidence_matrices$servettosur2
list_incidence_matrices <- list()
for (i in 1:nrow(datos_originales)) {
list_incidence_matrices[[i]] <- matrix(0, nrow = 1, ncol = 10) # Initialize a matrix for each list
colnames(list_incidence_matrices[[i]]) <- paste0("unit", 1:10)
#rownames(list_incidence_matrices[[i]]) <- "dummy_species" # Necessary, but species names don't matter for incidence_raw
for (j in 2:ncol(datos_originales)) {
if (!is.na(datos_originales[i, j])) {
list_incidence_matrices[[i]][1, j-1] <- 1
}
}
}
names(list_incidence_matrices) <- datos_originales$codigo_lista # Name each list element
list_incidence_matrices
list_incidence_matrices$servettosur1
matriz_binaria
t(matriz_binaria)
aber <- t(matriz_binaria)
# Realizar el análisis con iNEXT.4steps
resultado_inext <- iNEXT4steps(data = aber, datatype = "incidence_raw")
resultado_inext
list_incidence_matrices
datos_inext <- datos_inext(t(matriz_binaria))
# Realizar el análisis con iNEXT.4steps
resultado_inext <- iNEXT4steps(data = datos_inext, datatype = "incidence_raw")
datos_inext <- datos_inext(t(matriz_binaria))
# Realizar el análisis con iNEXT.4steps
resultado_inext <- iNEXT4steps(data = datos_inext, datatype = "incidence_raw")
iNEXT4steps(datos_inext, q = seq(0, 2, 0.2), datatype = "incidence_raw", nboot = 30, conf = 0.95, nT = NULL, details = FALSE)
resultado_inext <- iNEXT4steps(datos_inext, q = seq(0, 2, 0.2), datatype = "incidence_raw", nboot = 30, conf = 0.95, nT = NULL, details = FALSE)
datos_inext <- lista(datos_inext(t(matriz_binaria)))
datos_inext <- list(datos_inext(t(matriz_binaria)))
datos_inext <- list((t(matriz_binaria)))
resultado_inext <- iNEXT4steps(datos_inext, q = seq(0, 2, 0.2), datatype = "incidence_raw", nboot = 30, conf = 0.95, nT = NULL, details = FALSE)
datos_inext
# Realizar el análisis con iNEXT.4steps
resultado_inext <- iNEXT4steps(datos_inext, datatype = "incidence_raw")
# Calcular la completitud del inventario
completitud <- Completeness(resultado_inext, datatype = "incidence_raw")
Completeness(resultado_inext, datatype = "incidence_raw")
resultado_inext
resultado_inext$summary
our_Steps_out2$figure[[6]]
resultado_inext$figure[[6]]
Completeness(datos_inext, datatype = "incidence_raw")
a <- Completeness(datos_inext, datatype = "incidence_raw")
ggCompleteness(a)
head(datos_inext)
datos_inext[,1:3]
datos_inext[1,1:3]
datos_inext[3]
datos_inext[1]
datos_inext[1,1]
datos_inext[1][1]
datos_inext[1][2]
datos_inext[[1]]
datos_inext[[1]][1]
datos_inext[[1]][1,1]
datos_inext[[1]][1:2]
datos_inext[[1]][1,1:2]
datos_inext[[1]]
datos_inext[[1]][1,-1]
datos_inext[[1]][0,-1]
datos_inext[[1]][2,-1]
datos_inext[[1]][1:2,-1]
datos_inext[[1]][1:2,-1]
datos_inext[[1]][1:5,-1]
datos_inext[[1]][1:5]
datos_inext[[1]][1:5,-1]
resultado_inext$figure[[6]]
read.csv("listas_mack.csv", stringsAsFactors = FALSE)
read.csv("listas_mack.csv", stringsAsFactors = FALSE)[1,1]
read.csv("listas_mack.csv", stringsAsFactors = FALSE)
read.csv("listas_mack.csv", stringsAsFactors = FALSE)[1,]
read.csv("listas_mack.csv", stringsAsFactors = FALSE)
read.csv("listas_mack.csv", stringsAsFactors = FALSE)[28-50,]
read.csv("listas_mack.csv", stringsAsFactors = FALSE)[28:50,]
read.csv("listas_mack.csv", stringsAsFactors = FALSE)[28:50,]
# Leer el archivo
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE)[28:50,]
especies_unicas <- unique(unlist(datos_originales[, -1]))
especies_unicas <- especies_unicas[!is.na(especies_unicas)]
# Crear la matriz binaria
matriz_binaria <- matrix(0, nrow = nrow(datos_originales), ncol = length(especies_unicas))
rownames(matriz_binaria) <- datos_originales$codigo_lista
colnames(matriz_binaria) <- especies_unicas
# Llenar la matriz binaria
for (i in 1:nrow(datos_originales)) {
for (j in 2:ncol(datos_originales)) {
especie <- datos_originales[i, j]
if (!is.na(especie)) {
matriz_binaria[i, especie == especies_unicas] <- 1
}
}
}
datos_inext <- list((t(matriz_binaria)))
datos_inext[[1]][1:5,-1]
# Realizar el análisis con iNEXT.4steps
resultado_inext <- iNEXT4steps(datos_inext, datatype = "incidence_raw")
resultado_inext$summary
resultado_inext$figure[[6]]
read.csv("listas_mack.csv", stringsAsFactors = FALSE)
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE)[11:16,]
especies_unicas <- unique(unlist(datos_originales[, -1]))
especies_unicas <- especies_unicas[!is.na(especies_unicas)]
# Crear la matriz binaria
matriz_binaria <- matrix(0, nrow = nrow(datos_originales), ncol = length(especies_unicas))
rownames(matriz_binaria) <- datos_originales$codigo_lista
colnames(matriz_binaria) <- especies_unicas
# Llenar la matriz binaria
for (i in 1:nrow(datos_originales)) {
for (j in 2:ncol(datos_originales)) {
especie <- datos_originales[i, j]
if (!is.na(especie)) {
matriz_binaria[i, especie == especies_unicas] <- 1
}
}
}
datos_inext <- list((t(matriz_binaria)))
resultado_inext <- iNEXT4steps(datos_inext, datatype = "incidence_raw")
resultado_inext$summary
resultado_inext$figure[[6]]
resultado_inext$figure[[6]]
resultado_inext <- iNEXT4steps(datos_inext, datatype = "incidence_raw")
resultado_inext$figure[[6]]
datos_inext[[1]][1:5,1:4]
read.csv("listas_mack.csv", stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
library(iNEXT.4steps)
# Leer el archivo
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE)[28:50,]
datos_originales
read.csv("listas_mack.csv", stringsAsFactors = FALSE)
# Leer el archivo
datos_originales <- read.csv("listas_mack.csv", stringsAsFactors = FALSE)[103:123,]
datos_originales
especies_unicas <- unique(unlist(datos_originales[, -1]))
especies_unicas <- especies_unicas[!is.na(especies_unicas)]
# Crear la matriz binaria
matriz_binaria <- matrix(0, nrow = nrow(datos_originales), ncol = length(especies_unicas))
rownames(matriz_binaria) <- datos_originales$codigo_lista
colnames(matriz_binaria) <- especies_unicas
# Llenar la matriz binaria
for (i in 1:nrow(datos_originales)) {
for (j in 2:ncol(datos_originales)) {
especie <- datos_originales[i, j]
if (!is.na(especie)) {
matriz_binaria[i, especie == especies_unicas] <- 1
}
}
}
datos_inext <- list((t(matriz_binaria)))
datos_inext[[1]][1:5,1:4]
# Realizar el análisis con iNEXT.4steps
resultado_inext <- iNEXT4steps(datos_inext, datatype = "incidence_raw")
resultado_inext$summary
resultado_inext$figure[[6]]
resultado_inext$figure[[6]]
resultado_inext$figure[[6]][1]
resultado_inext$summary
resultado_inext$figure
resultado_inext$figure[[1]]
knit_with_parameters("E:/la_carpeta/aves_rocha/inext_package.Rmd")
